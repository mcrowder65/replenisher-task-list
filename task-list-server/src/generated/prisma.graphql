# source: http://localhost:4466/tasks/test
# timestamp: Wed Sep 19 2018 07:53:38 GMT-0600 (Mountain Daylight Time)

type AggregateNote {
  count: Int!
}

type AggregateStatusStat {
  count: Int!
}

type AggregateTask {
  count: Int!
}

type AggregateTaskMeta {
  count: Int!
}

type AggregateTemplate {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createTemplate(data: TemplateCreateInput!): Template!
  createTask(data: TaskCreateInput!): Task!
  createTaskMeta(data: TaskMetaCreateInput!): TaskMeta!
  createNote(data: NoteCreateInput!): Note!
  createStatusStat(data: StatusStatCreateInput!): StatusStat!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateTemplate(data: TemplateUpdateInput!, where: TemplateWhereUniqueInput!): Template
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateTaskMeta(data: TaskMetaUpdateInput!, where: TaskMetaWhereUniqueInput!): TaskMeta
  updateNote(data: NoteUpdateInput!, where: NoteWhereUniqueInput!): Note
  updateStatusStat(data: StatusStatUpdateInput!, where: StatusStatWhereUniqueInput!): StatusStat
  deleteUser(where: UserWhereUniqueInput!): User
  deleteTemplate(where: TemplateWhereUniqueInput!): Template
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteTaskMeta(where: TaskMetaWhereUniqueInput!): TaskMeta
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteStatusStat(where: StatusStatWhereUniqueInput!): StatusStat
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertTemplate(where: TemplateWhereUniqueInput!, create: TemplateCreateInput!, update: TemplateUpdateInput!): Template!
  upsertTask(where: TaskWhereUniqueInput!, create: TaskCreateInput!, update: TaskUpdateInput!): Task!
  upsertTaskMeta(where: TaskMetaWhereUniqueInput!, create: TaskMetaCreateInput!, update: TaskMetaUpdateInput!): TaskMeta!
  upsertNote(where: NoteWhereUniqueInput!, create: NoteCreateInput!, update: NoteUpdateInput!): Note!
  upsertStatusStat(where: StatusStatWhereUniqueInput!, create: StatusStatCreateInput!, update: StatusStatUpdateInput!): StatusStat!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyTemplates(data: TemplateUpdateInput!, where: TemplateWhereInput): BatchPayload!
  updateManyTasks(data: TaskUpdateInput!, where: TaskWhereInput): BatchPayload!
  updateManyTaskMetas(data: TaskMetaUpdateInput!, where: TaskMetaWhereInput): BatchPayload!
  updateManyNotes(data: NoteUpdateInput!, where: NoteWhereInput): BatchPayload!
  updateManyStatusStats(data: StatusStatUpdateInput!, where: StatusStatWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyTemplates(where: TemplateWhereInput): BatchPayload!
  deleteManyTasks(where: TaskWhereInput): BatchPayload!
  deleteManyTaskMetas(where: TaskMetaWhereInput): BatchPayload!
  deleteManyNotes(where: NoteWhereInput): BatchPayload!
  deleteManyStatusStats(where: StatusStatWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Note implements Node {
  id: ID!
  title: String!
  text: String!
  date: DateTime!
  task(where: TaskWhereInput): Task!
  author(where: UserWhereInput): User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type NoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [NoteEdge]!
  aggregate: AggregateNote!
}

input NoteCreateInput {
  title: String!
  text: String!
  date: DateTime!
  task: TaskCreateOneWithoutNotesInput!
  author: UserCreateOneWithoutWrittenNotesInput!
}

input NoteCreateManyWithoutAuthorInput {
  create: [NoteCreateWithoutAuthorInput!]
  connect: [NoteWhereUniqueInput!]
}

input NoteCreateManyWithoutTaskInput {
  create: [NoteCreateWithoutTaskInput!]
  connect: [NoteWhereUniqueInput!]
}

input NoteCreateWithoutAuthorInput {
  title: String!
  text: String!
  date: DateTime!
  task: TaskCreateOneWithoutNotesInput!
}

input NoteCreateWithoutTaskInput {
  title: String!
  text: String!
  date: DateTime!
  author: UserCreateOneWithoutWrittenNotesInput!
}

"""An edge in a connection."""
type NoteEdge {
  """The item at the end of the edge."""
  node: Note!

  """A cursor for use in pagination."""
  cursor: String!
}

enum NoteOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  date_ASC
  date_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NotePreviousValues {
  id: ID!
  title: String!
  text: String!
  date: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type NoteSubscriptionPayload {
  mutation: MutationType!
  node: Note
  updatedFields: [String!]
  previousValues: NotePreviousValues
}

input NoteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [NoteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [NoteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NoteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: NoteWhereInput
}

input NoteUpdateInput {
  title: String
  text: String
  date: DateTime
  task: TaskUpdateOneWithoutNotesInput
  author: UserUpdateOneWithoutWrittenNotesInput
}

input NoteUpdateManyWithoutAuthorInput {
  create: [NoteCreateWithoutAuthorInput!]
  connect: [NoteWhereUniqueInput!]
  disconnect: [NoteWhereUniqueInput!]
  delete: [NoteWhereUniqueInput!]
  update: [NoteUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [NoteUpsertWithWhereUniqueWithoutAuthorInput!]
}

input NoteUpdateManyWithoutTaskInput {
  create: [NoteCreateWithoutTaskInput!]
  connect: [NoteWhereUniqueInput!]
  disconnect: [NoteWhereUniqueInput!]
  delete: [NoteWhereUniqueInput!]
  update: [NoteUpdateWithWhereUniqueWithoutTaskInput!]
  upsert: [NoteUpsertWithWhereUniqueWithoutTaskInput!]
}

input NoteUpdateWithoutAuthorDataInput {
  title: String
  text: String
  date: DateTime
  task: TaskUpdateOneWithoutNotesInput
}

input NoteUpdateWithoutTaskDataInput {
  title: String
  text: String
  date: DateTime
  author: UserUpdateOneWithoutWrittenNotesInput
}

input NoteUpdateWithWhereUniqueWithoutAuthorInput {
  where: NoteWhereUniqueInput!
  data: NoteUpdateWithoutAuthorDataInput!
}

input NoteUpdateWithWhereUniqueWithoutTaskInput {
  where: NoteWhereUniqueInput!
  data: NoteUpdateWithoutTaskDataInput!
}

input NoteUpsertWithWhereUniqueWithoutAuthorInput {
  where: NoteWhereUniqueInput!
  update: NoteUpdateWithoutAuthorDataInput!
  create: NoteCreateWithoutAuthorInput!
}

input NoteUpsertWithWhereUniqueWithoutTaskInput {
  where: NoteWhereUniqueInput!
  update: NoteUpdateWithoutTaskDataInput!
  create: NoteCreateWithoutTaskInput!
}

input NoteWhereInput {
  """Logical AND on all given filters."""
  AND: [NoteWhereInput!]

  """Logical OR on all given filters."""
  OR: [NoteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [NoteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  date: DateTime

  """All values that are not equal to given value."""
  date_not: DateTime

  """All values that are contained in given list."""
  date_in: [DateTime!]

  """All values that are not contained in given list."""
  date_not_in: [DateTime!]

  """All values less than the given value."""
  date_lt: DateTime

  """All values less than or equal the given value."""
  date_lte: DateTime

  """All values greater than the given value."""
  date_gt: DateTime

  """All values greater than or equal the given value."""
  date_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  task: TaskWhereInput
  author: UserWhereInput
}

input NoteWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  templates(where: TemplateWhereInput, orderBy: TemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Template]!
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task]!
  taskMetas(where: TaskMetaWhereInput, orderBy: TaskMetaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TaskMeta]!
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note]!
  statusStats(where: StatusStatWhereInput, orderBy: StatusStatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StatusStat]!
  user(where: UserWhereUniqueInput!): User
  template(where: TemplateWhereUniqueInput!): Template
  task(where: TaskWhereUniqueInput!): Task
  taskMeta(where: TaskMetaWhereUniqueInput!): TaskMeta
  note(where: NoteWhereUniqueInput!): Note
  statusStat(where: StatusStatWhereUniqueInput!): StatusStat
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  templatesConnection(where: TemplateWhereInput, orderBy: TemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TemplateConnection!
  tasksConnection(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TaskConnection!
  taskMetasConnection(where: TaskMetaWhereInput, orderBy: TaskMetaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TaskMetaConnection!
  notesConnection(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NoteConnection!
  statusStatsConnection(where: StatusStatWhereInput, orderBy: StatusStatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StatusStatConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Status {
  READY
  STARTED
  FINISHED
}

type StatusStat implements Node {
  id: ID!
  taskMeta(where: TaskMetaWhereInput): TaskMeta!
  newStatus: Status!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type StatusStatConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StatusStatEdge]!
  aggregate: AggregateStatusStat!
}

input StatusStatCreateInput {
  newStatus: Status!
  taskMeta: TaskMetaCreateOneInput!
}

"""An edge in a connection."""
type StatusStatEdge {
  """The item at the end of the edge."""
  node: StatusStat!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StatusStatOrderByInput {
  id_ASC
  id_DESC
  newStatus_ASC
  newStatus_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StatusStatPreviousValues {
  id: ID!
  newStatus: Status!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StatusStatSubscriptionPayload {
  mutation: MutationType!
  node: StatusStat
  updatedFields: [String!]
  previousValues: StatusStatPreviousValues
}

input StatusStatSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StatusStatSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StatusStatSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StatusStatSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StatusStatWhereInput
}

input StatusStatUpdateInput {
  newStatus: Status
  taskMeta: TaskMetaUpdateOneInput
}

input StatusStatWhereInput {
  """Logical AND on all given filters."""
  AND: [StatusStatWhereInput!]

  """Logical OR on all given filters."""
  OR: [StatusStatWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StatusStatWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  newStatus: Status

  """All values that are not equal to given value."""
  newStatus_not: Status

  """All values that are contained in given list."""
  newStatus_in: [Status!]

  """All values that are not contained in given list."""
  newStatus_not_in: [Status!]
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  taskMeta: TaskMetaWhereInput
}

input StatusStatWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  template(where: TemplateSubscriptionWhereInput): TemplateSubscriptionPayload
  task(where: TaskSubscriptionWhereInput): TaskSubscriptionPayload
  taskMeta(where: TaskMetaSubscriptionWhereInput): TaskMetaSubscriptionPayload
  note(where: NoteSubscriptionWhereInput): NoteSubscriptionPayload
  statusStat(where: StatusStatSubscriptionWhereInput): StatusStatSubscriptionPayload
}

type Task implements Node {
  id: ID!
  taskMeta(where: TaskMetaWhereInput): TaskMeta!
  notes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note!]
  user(where: UserWhereInput): User!
  assigned: Boolean!
  status: Status!
  beginDate: DateTime!
  endDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type TaskConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaskEdge]!
  aggregate: AggregateTask!
}

input TaskCreateInput {
  assigned: Boolean
  status: Status
  beginDate: DateTime!
  endDate: DateTime!
  taskMeta: TaskMetaCreateOneWithoutTasksInput!
  notes: NoteCreateManyWithoutTaskInput
  user: UserCreateOneWithoutTasksInput!
}

input TaskCreateManyWithoutTaskMetaInput {
  create: [TaskCreateWithoutTaskMetaInput!]
  connect: [TaskWhereUniqueInput!]
}

input TaskCreateManyWithoutUserInput {
  create: [TaskCreateWithoutUserInput!]
  connect: [TaskWhereUniqueInput!]
}

input TaskCreateOneWithoutNotesInput {
  create: TaskCreateWithoutNotesInput
  connect: TaskWhereUniqueInput
}

input TaskCreateWithoutNotesInput {
  assigned: Boolean
  status: Status
  beginDate: DateTime!
  endDate: DateTime!
  taskMeta: TaskMetaCreateOneWithoutTasksInput!
  user: UserCreateOneWithoutTasksInput!
}

input TaskCreateWithoutTaskMetaInput {
  assigned: Boolean
  status: Status
  beginDate: DateTime!
  endDate: DateTime!
  notes: NoteCreateManyWithoutTaskInput
  user: UserCreateOneWithoutTasksInput!
}

input TaskCreateWithoutUserInput {
  assigned: Boolean
  status: Status
  beginDate: DateTime!
  endDate: DateTime!
  taskMeta: TaskMetaCreateOneWithoutTasksInput!
  notes: NoteCreateManyWithoutTaskInput
}

"""An edge in a connection."""
type TaskEdge {
  """The item at the end of the edge."""
  node: Task!

  """A cursor for use in pagination."""
  cursor: String!
}

type TaskMeta implements Node {
  id: ID!
  title: String!
  description: String!
  priority: Priority!
  beginDate: DateTime!
  endDate: DateTime!
  repeat: Int!
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task!]
  template(where: TemplateWhereInput): Template
}

"""A connection to a list of items."""
type TaskMetaConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TaskMetaEdge]!
  aggregate: AggregateTaskMeta!
}

input TaskMetaCreateInput {
  title: String!
  description: String!
  priority: Priority
  beginDate: DateTime!
  endDate: DateTime!
  repeat: Int
  tasks: TaskCreateManyWithoutTaskMetaInput
  template: TemplateCreateOneWithoutTaskMetaInput
}

input TaskMetaCreateOneInput {
  create: TaskMetaCreateInput
  connect: TaskMetaWhereUniqueInput
}

input TaskMetaCreateOneWithoutTasksInput {
  create: TaskMetaCreateWithoutTasksInput
  connect: TaskMetaWhereUniqueInput
}

input TaskMetaCreateOneWithoutTemplateInput {
  create: TaskMetaCreateWithoutTemplateInput
  connect: TaskMetaWhereUniqueInput
}

input TaskMetaCreateWithoutTasksInput {
  title: String!
  description: String!
  priority: Priority
  beginDate: DateTime!
  endDate: DateTime!
  repeat: Int
  template: TemplateCreateOneWithoutTaskMetaInput
}

input TaskMetaCreateWithoutTemplateInput {
  title: String!
  description: String!
  priority: Priority
  beginDate: DateTime!
  endDate: DateTime!
  repeat: Int
  tasks: TaskCreateManyWithoutTaskMetaInput
}

"""An edge in a connection."""
type TaskMetaEdge {
  """The item at the end of the edge."""
  node: TaskMeta!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TaskMetaOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  priority_ASC
  priority_DESC
  beginDate_ASC
  beginDate_DESC
  endDate_ASC
  endDate_DESC
  repeat_ASC
  repeat_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TaskMetaPreviousValues {
  id: ID!
  title: String!
  description: String!
  priority: Priority!
  beginDate: DateTime!
  endDate: DateTime!
  repeat: Int!
}

type TaskMetaSubscriptionPayload {
  mutation: MutationType!
  node: TaskMeta
  updatedFields: [String!]
  previousValues: TaskMetaPreviousValues
}

input TaskMetaSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TaskMetaSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaskMetaSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaskMetaSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TaskMetaWhereInput
}

input TaskMetaUpdateDataInput {
  title: String
  description: String
  priority: Priority
  beginDate: DateTime
  endDate: DateTime
  repeat: Int
  tasks: TaskUpdateManyWithoutTaskMetaInput
  template: TemplateUpdateOneWithoutTaskMetaInput
}

input TaskMetaUpdateInput {
  title: String
  description: String
  priority: Priority
  beginDate: DateTime
  endDate: DateTime
  repeat: Int
  tasks: TaskUpdateManyWithoutTaskMetaInput
  template: TemplateUpdateOneWithoutTaskMetaInput
}

input TaskMetaUpdateOneInput {
  create: TaskMetaCreateInput
  connect: TaskMetaWhereUniqueInput
  delete: Boolean
  update: TaskMetaUpdateDataInput
  upsert: TaskMetaUpsertNestedInput
}

input TaskMetaUpdateOneWithoutTasksInput {
  create: TaskMetaCreateWithoutTasksInput
  connect: TaskMetaWhereUniqueInput
  delete: Boolean
  update: TaskMetaUpdateWithoutTasksDataInput
  upsert: TaskMetaUpsertWithoutTasksInput
}

input TaskMetaUpdateOneWithoutTemplateInput {
  create: TaskMetaCreateWithoutTemplateInput
  connect: TaskMetaWhereUniqueInput
  delete: Boolean
  update: TaskMetaUpdateWithoutTemplateDataInput
  upsert: TaskMetaUpsertWithoutTemplateInput
}

input TaskMetaUpdateWithoutTasksDataInput {
  title: String
  description: String
  priority: Priority
  beginDate: DateTime
  endDate: DateTime
  repeat: Int
  template: TemplateUpdateOneWithoutTaskMetaInput
}

input TaskMetaUpdateWithoutTemplateDataInput {
  title: String
  description: String
  priority: Priority
  beginDate: DateTime
  endDate: DateTime
  repeat: Int
  tasks: TaskUpdateManyWithoutTaskMetaInput
}

input TaskMetaUpsertNestedInput {
  update: TaskMetaUpdateDataInput!
  create: TaskMetaCreateInput!
}

input TaskMetaUpsertWithoutTasksInput {
  update: TaskMetaUpdateWithoutTasksDataInput!
  create: TaskMetaCreateWithoutTasksInput!
}

input TaskMetaUpsertWithoutTemplateInput {
  update: TaskMetaUpdateWithoutTemplateDataInput!
  create: TaskMetaCreateWithoutTemplateInput!
}

input TaskMetaWhereInput {
  """Logical AND on all given filters."""
  AND: [TaskMetaWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaskMetaWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaskMetaWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  priority: Priority

  """All values that are not equal to given value."""
  priority_not: Priority

  """All values that are contained in given list."""
  priority_in: [Priority!]

  """All values that are not contained in given list."""
  priority_not_in: [Priority!]
  beginDate: DateTime

  """All values that are not equal to given value."""
  beginDate_not: DateTime

  """All values that are contained in given list."""
  beginDate_in: [DateTime!]

  """All values that are not contained in given list."""
  beginDate_not_in: [DateTime!]

  """All values less than the given value."""
  beginDate_lt: DateTime

  """All values less than or equal the given value."""
  beginDate_lte: DateTime

  """All values greater than the given value."""
  beginDate_gt: DateTime

  """All values greater than or equal the given value."""
  beginDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  repeat: Int

  """All values that are not equal to given value."""
  repeat_not: Int

  """All values that are contained in given list."""
  repeat_in: [Int!]

  """All values that are not contained in given list."""
  repeat_not_in: [Int!]

  """All values less than the given value."""
  repeat_lt: Int

  """All values less than or equal the given value."""
  repeat_lte: Int

  """All values greater than the given value."""
  repeat_gt: Int

  """All values greater than or equal the given value."""
  repeat_gte: Int
  tasks_every: TaskWhereInput
  tasks_some: TaskWhereInput
  tasks_none: TaskWhereInput
  template: TemplateWhereInput
}

input TaskMetaWhereUniqueInput {
  id: ID
}

enum TaskOrderByInput {
  id_ASC
  id_DESC
  assigned_ASC
  assigned_DESC
  status_ASC
  status_DESC
  beginDate_ASC
  beginDate_DESC
  endDate_ASC
  endDate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TaskPreviousValues {
  id: ID!
  assigned: Boolean!
  status: Status!
  beginDate: DateTime!
  endDate: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TaskSubscriptionPayload {
  mutation: MutationType!
  node: Task
  updatedFields: [String!]
  previousValues: TaskPreviousValues
}

input TaskSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TaskSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaskSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaskSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TaskWhereInput
}

input TaskUpdateInput {
  assigned: Boolean
  status: Status
  beginDate: DateTime
  endDate: DateTime
  taskMeta: TaskMetaUpdateOneWithoutTasksInput
  notes: NoteUpdateManyWithoutTaskInput
  user: UserUpdateOneWithoutTasksInput
}

input TaskUpdateManyWithoutTaskMetaInput {
  create: [TaskCreateWithoutTaskMetaInput!]
  connect: [TaskWhereUniqueInput!]
  disconnect: [TaskWhereUniqueInput!]
  delete: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutTaskMetaInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutTaskMetaInput!]
}

input TaskUpdateManyWithoutUserInput {
  create: [TaskCreateWithoutUserInput!]
  connect: [TaskWhereUniqueInput!]
  disconnect: [TaskWhereUniqueInput!]
  delete: [TaskWhereUniqueInput!]
  update: [TaskUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TaskUpsertWithWhereUniqueWithoutUserInput!]
}

input TaskUpdateOneWithoutNotesInput {
  create: TaskCreateWithoutNotesInput
  connect: TaskWhereUniqueInput
  delete: Boolean
  update: TaskUpdateWithoutNotesDataInput
  upsert: TaskUpsertWithoutNotesInput
}

input TaskUpdateWithoutNotesDataInput {
  assigned: Boolean
  status: Status
  beginDate: DateTime
  endDate: DateTime
  taskMeta: TaskMetaUpdateOneWithoutTasksInput
  user: UserUpdateOneWithoutTasksInput
}

input TaskUpdateWithoutTaskMetaDataInput {
  assigned: Boolean
  status: Status
  beginDate: DateTime
  endDate: DateTime
  notes: NoteUpdateManyWithoutTaskInput
  user: UserUpdateOneWithoutTasksInput
}

input TaskUpdateWithoutUserDataInput {
  assigned: Boolean
  status: Status
  beginDate: DateTime
  endDate: DateTime
  taskMeta: TaskMetaUpdateOneWithoutTasksInput
  notes: NoteUpdateManyWithoutTaskInput
}

input TaskUpdateWithWhereUniqueWithoutTaskMetaInput {
  where: TaskWhereUniqueInput!
  data: TaskUpdateWithoutTaskMetaDataInput!
}

input TaskUpdateWithWhereUniqueWithoutUserInput {
  where: TaskWhereUniqueInput!
  data: TaskUpdateWithoutUserDataInput!
}

input TaskUpsertWithoutNotesInput {
  update: TaskUpdateWithoutNotesDataInput!
  create: TaskCreateWithoutNotesInput!
}

input TaskUpsertWithWhereUniqueWithoutTaskMetaInput {
  where: TaskWhereUniqueInput!
  update: TaskUpdateWithoutTaskMetaDataInput!
  create: TaskCreateWithoutTaskMetaInput!
}

input TaskUpsertWithWhereUniqueWithoutUserInput {
  where: TaskWhereUniqueInput!
  update: TaskUpdateWithoutUserDataInput!
  create: TaskCreateWithoutUserInput!
}

input TaskWhereInput {
  """Logical AND on all given filters."""
  AND: [TaskWhereInput!]

  """Logical OR on all given filters."""
  OR: [TaskWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TaskWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  assigned: Boolean

  """All values that are not equal to given value."""
  assigned_not: Boolean
  status: Status

  """All values that are not equal to given value."""
  status_not: Status

  """All values that are contained in given list."""
  status_in: [Status!]

  """All values that are not contained in given list."""
  status_not_in: [Status!]
  beginDate: DateTime

  """All values that are not equal to given value."""
  beginDate_not: DateTime

  """All values that are contained in given list."""
  beginDate_in: [DateTime!]

  """All values that are not contained in given list."""
  beginDate_not_in: [DateTime!]

  """All values less than the given value."""
  beginDate_lt: DateTime

  """All values less than or equal the given value."""
  beginDate_lte: DateTime

  """All values greater than the given value."""
  beginDate_gt: DateTime

  """All values greater than or equal the given value."""
  beginDate_gte: DateTime
  endDate: DateTime

  """All values that are not equal to given value."""
  endDate_not: DateTime

  """All values that are contained in given list."""
  endDate_in: [DateTime!]

  """All values that are not contained in given list."""
  endDate_not_in: [DateTime!]

  """All values less than the given value."""
  endDate_lt: DateTime

  """All values less than or equal the given value."""
  endDate_lte: DateTime

  """All values greater than the given value."""
  endDate_gt: DateTime

  """All values greater than or equal the given value."""
  endDate_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  taskMeta: TaskMetaWhereInput
  notes_every: NoteWhereInput
  notes_some: NoteWhereInput
  notes_none: NoteWhereInput
  user: UserWhereInput
}

input TaskWhereUniqueInput {
  id: ID
}

type Template implements Node {
  id: ID!
  taskMeta(where: TaskMetaWhereInput): TaskMeta!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type TemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TemplateEdge]!
  aggregate: AggregateTemplate!
}

input TemplateCreateInput {
  taskMeta: TaskMetaCreateOneWithoutTemplateInput!
}

input TemplateCreateOneWithoutTaskMetaInput {
  connect: TemplateWhereUniqueInput
}

"""An edge in a connection."""
type TemplateEdge {
  """The item at the end of the edge."""
  node: Template!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TemplateOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TemplatePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TemplateSubscriptionPayload {
  mutation: MutationType!
  node: Template
  updatedFields: [String!]
  previousValues: TemplatePreviousValues
}

input TemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TemplateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TemplateWhereInput
}

input TemplateUpdateInput {
  taskMeta: TaskMetaUpdateOneWithoutTemplateInput
}

input TemplateUpdateOneWithoutTaskMetaInput {
  connect: TemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
}

input TemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [TemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [TemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  taskMeta: TaskMetaWhereInput
}

input TemplateWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  admin: Boolean!
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task!]
  writtenNotes(where: NoteWhereInput, orderBy: NoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Note!]
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  admin: Boolean
  tasks: TaskCreateManyWithoutUserInput
  writtenNotes: NoteCreateManyWithoutAuthorInput
}

input UserCreateOneWithoutTasksInput {
  create: UserCreateWithoutTasksInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutWrittenNotesInput {
  create: UserCreateWithoutWrittenNotesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutTasksInput {
  email: String!
  password: String!
  name: String!
  admin: Boolean
  writtenNotes: NoteCreateManyWithoutAuthorInput
}

input UserCreateWithoutWrittenNotesInput {
  email: String!
  password: String!
  name: String!
  admin: Boolean
  tasks: TaskCreateManyWithoutUserInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  admin_ASC
  admin_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
  admin: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  admin: Boolean
  tasks: TaskUpdateManyWithoutUserInput
  writtenNotes: NoteUpdateManyWithoutAuthorInput
}

input UserUpdateOneWithoutTasksInput {
  create: UserCreateWithoutTasksInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutTasksDataInput
  upsert: UserUpsertWithoutTasksInput
}

input UserUpdateOneWithoutWrittenNotesInput {
  create: UserCreateWithoutWrittenNotesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutWrittenNotesDataInput
  upsert: UserUpsertWithoutWrittenNotesInput
}

input UserUpdateWithoutTasksDataInput {
  email: String
  password: String
  name: String
  admin: Boolean
  writtenNotes: NoteUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutWrittenNotesDataInput {
  email: String
  password: String
  name: String
  admin: Boolean
  tasks: TaskUpdateManyWithoutUserInput
}

input UserUpsertWithoutTasksInput {
  update: UserUpdateWithoutTasksDataInput!
  create: UserCreateWithoutTasksInput!
}

input UserUpsertWithoutWrittenNotesInput {
  update: UserUpdateWithoutWrittenNotesDataInput!
  create: UserCreateWithoutWrittenNotesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  admin: Boolean

  """All values that are not equal to given value."""
  admin_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  tasks_every: TaskWhereInput
  tasks_some: TaskWhereInput
  tasks_none: TaskWhereInput
  writtenNotes_every: NoteWhereInput
  writtenNotes_some: NoteWhereInput
  writtenNotes_none: NoteWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
